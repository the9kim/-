{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "b44587b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "데이터 크기: 187088\n",
      "Examples:\n",
      " [\"Now I've heard there was a secret chord\", 'That David played, and it pleased the Lord', \"But you don't really care for music, do you?\"]\n"
     ]
    }
   ],
   "source": [
    "# 1. 데이터 준비\n",
    "\n",
    "import glob\n",
    "import os\n",
    "\n",
    "txt_file_path = os.getenv('HOME')+'/aiffel/lyricist/data/lyrics/*'\n",
    "\n",
    "txt_list = glob.glob(txt_file_path)\n",
    "\n",
    "raw_corpus = []\n",
    "\n",
    "  # txt 파일을 모두 읽어서 raw_corpus에 담기\n",
    "for txt_file in txt_list:\n",
    "  with open(txt_file, \"r\") as f:\n",
    "    raw = f.read().splitlines()\n",
    "\n",
    "    # list.extend(iterable) : list 끝에 iterable 객체 삽입 (참고 append는 리스트 자체를 삽입)\n",
    "    # append와 extend 차이 : https://m.blog.naver.com/wideeyed/221541104629\n",
    "    raw_corpus.extend(raw)\n",
    "\n",
    "print(\"데이터 크기:\", len(raw_corpus))\n",
    "print(\"Examples:\\n\", raw_corpus[:3])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "dc26892f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "175749\n",
      "[[   2   50    4 ...    0    0    0]\n",
      " [   2   15 2967 ...    0    0    0]\n",
      " [   2   33    7 ...   46    3    0]\n",
      " ...\n",
      " [   0    0    0 ...    0    0    0]\n",
      " [   0    0    0 ...    0    0    0]\n",
      " [   2    7   34 ...    0    0    0]] <keras_preprocessing.text.Tokenizer object at 0x7f4a9ba37730>\n",
      "-----------------------------------------\n",
      "[[   2   50    4   95  303   62   53    9  946 6263]\n",
      " [   2   15 2967  871    5    8   11 5739    6  374]\n",
      " [   2   33    7   40   16  164  288   28  333    5]]\n",
      "-----------------------------------------\n",
      "1 : <unk>\n",
      "2 : <start>\n",
      "3 : <end>\n",
      "4 : i\n",
      "5 : ,\n",
      "6 : the\n",
      "7 : you\n",
      "8 : and\n",
      "9 : a\n",
      "10 : to\n"
     ]
    }
   ],
   "source": [
    "# 2. 데이터 정제\n",
    "\n",
    "import re\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "\n",
    "\n",
    "  # 토큰화를 위한 데이터 정리 함수 생성 \n",
    "    # 대문자를 소문자로 변환 : lower() \n",
    "    # 양쪽 끝 공백 제거 : strip()\n",
    "    # re.sub(r\"A\",\"B\") : 앞에 r이 붙을 경우 해당 문자열을 그대로 출력 \n",
    "def preprocess_sentence(sentence):\n",
    "  # 대문자를 소문자로 바꾸고, 양쪽 끝 공백제거\n",
    "  sentence = sentence.lower().strip()\n",
    "  # 특수문자 양쪽에 공백 넣기\n",
    "  sentence = re.sub(r\"([?.!,¿])\", r\" \\1 \", sentence)\n",
    "  # 여러개의 공백은 하나의 공백으로 바꾸기\n",
    "  sentence = re.sub(r'[\" \"]', \" \", sentence)\n",
    "  # a-zA-Z?.!,¿가 아닌 모든 문자는 하나의 공백으로 바꿈\n",
    "  sentence = re.sub(r\"[^a-zA-Z?.!,¿]+\", \" \", sentence)\n",
    "  # 다시 양쪽 공백을 지움\n",
    "  sentence = sentence.strip()\n",
    "  # 문장 시작에는 <start>, 끝에는 <end>를 추가\n",
    "  sentence = '<start> ' + sentence + ' <end>'\n",
    "  # 단어 개수가 15개 이상인 문장은 공백으로 바꾸기\n",
    "  if len(sentence.split()) > 15 : \n",
    "    sentence = \"\"\n",
    "  \n",
    "\n",
    "  return sentence\n",
    "\n",
    "\n",
    "\n",
    "  # 데이터 정제\n",
    "    # 1. 길이가 0인 문장과, 15인 문장 화자를 나타내는 문장 건너 뛰기\n",
    "    # 2. 함수를 이용하여 데이터 정제 후 리스트에 담기\n",
    "\n",
    "corpus = []\n",
    "for sentence in raw_corpus:\n",
    "  if len(sentence)==0 : continue\n",
    "  if sentence[-1] == \":\" : continue\n",
    "\n",
    "\n",
    "  preprossed_sentence = preprocess_sentence(sentence)\n",
    "  if len(preprocessed_sentence) == 0: continue \n",
    "\n",
    "  corpus.append(preprossed_sentence)\n",
    "\n",
    "  # 정제된 데이터 샘플(10개) 확인\n",
    "corpus[:10]\n",
    "print(len(corpus))\n",
    "\n",
    "\n",
    "\n",
    "  # 토큰화 및 텐서 변환\n",
    "    # 1. tokenize 함수 생성 \n",
    "      # 1) tokenizer 선언 : tf.keras.preprocessing.text.Tokenizer(num_words= , filters= , ovv_token=\"<unk>\")\n",
    "      # 2) tokenize 후 단어장 생성 : tokenizer.fit_on_texts()\n",
    "      # 3) Tensor로 변환 : tokenizer.texts_to_sequences()\n",
    "      # 4) 입력 데이터의 시퀀스 길이 일정하게 맞추기 : tf.keras.preprocessing.sequence.pad_sequences(tensor, padding='post')\n",
    "      # 5) tensor 및 tokenizer 프린트 및 리턴\n",
    "    # 2. tokenize 실행\n",
    "\n",
    "def tokenize(corpus):\n",
    "  tokenizer = tf.keras.preprocessing.text.Tokenizer(\n",
    "      num_words = 12000,\n",
    "      filters='',\n",
    "      oov_token = \"<unk>\")\n",
    "  tokenizer.fit_on_texts(corpus)\n",
    "  tensor = tokenizer.texts_to_sequences(corpus)\n",
    "  tensor = tf.keras.preprocessing.sequence.pad_sequences(tensor, padding = 'post')\n",
    "  print(tensor, tokenizer)\n",
    "  return tensor, tokenizer\n",
    "\n",
    "tensor, tokenizer = tokenize(corpus)\n",
    "\n",
    "  # (데이터 확인) 텐서 데이터 3번째 행, 10번째 열까지 출력\n",
    "print(\"-----------------------------------------\")\n",
    "print(tensor[:3, :10])\n",
    "\n",
    "\n",
    "\n",
    "  # (데이터 확인) tokenizer 단어사전 내 index 10번까지 출력\n",
    "print(\"-----------------------------------------\")\n",
    "for idx in tokenizer.index_word:\n",
    "  print(idx, \":\", tokenizer.index_word[idx])\n",
    "  if idx >= 10: break \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "cbaecf10",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[   2    7  467   65 7665   18    6 1564    3    0    0    0    0    0]\n",
      "[   7  467   65 7665   18    6 1564    3    0    0    0    0    0    0]\n",
      "Source Train:  (140599, 14)\n",
      "Target Train:  (140599, 14)\n"
     ]
    }
   ],
   "source": [
    "# 3. 평가 데이터셋 분리\n",
    "\n",
    "  # 소스 문장 및 타깃 문장 정의\n",
    "    # 소스 문장 : <end> 제거\n",
    "    # 타깃 문장 : <start> 제거\n",
    "    # 데이터 확인\n",
    "scr_input = tensor[ : , : -1]\n",
    "tgt_input = tensor[ : , 1 : ]\n",
    "print(scr_input[10])\n",
    "print(tgt_input[10])\n",
    "\n",
    "\n",
    "\n",
    "  # 훈련 데이터와 평가 데이터 분리\n",
    "    # 모듈 임포트\n",
    "    # train_test_split \n",
    "    # validation data 20%로 분리\n",
    "    # train 데이터 shape 출력\n",
    "from sklearn.model_selection import train_test_split\n",
    "enc_train, enc_val, dec_train, dec_val = train_test_split(scr_input, tgt_input, test_size=0.2, random_state=21)\n",
    "print(\"Source Train: \", enc_train.shape)\n",
    "print(\"Target Train: \", dec_train.shape)\n",
    "\n",
    "\n",
    "\n",
    "  # 데이터셋 만들기\n",
    "    # 1. BUFFER_SIZE, BATCH_SIZE, step_per_epoch(=len(scr_input)//BATCH_SIZE) 설정\n",
    "    # 2. VOCAB_SIZE 설정 (tonkenizer.num_words)\n",
    "    # 3. 데이터셋 만들기 \n",
    "      # 데이터셋 생성 : tf.data.Dataset.from_tensor_slices((src_input, tgt_input))\n",
    "      # 데이터셋 섞기? : .shuffle(BUFFER_SIZE)\n",
    "      # 데이터셋 배치사이즈 결정 : .batch(BATCH_SIZE, drop_remainder = True)\n",
    "BUFFER_SIZE = len(scr_input)\n",
    "BATCH_SIZE = 256\n",
    "step_per_epoch = len(scr_input) / BATCH_SIZE\n",
    "\n",
    "VOCAB_SIZE = tokenizer.num_words + 1\n",
    "\n",
    "dataset = tf.data.Dataset.from_tensor_slices((enc_train, dec_train))\n",
    "dataset = dataset.shuffle(BUFFER_SIZE)\n",
    "dataset = dataset.batch(BATCH_SIZE, drop_remainder = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "026051c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"text_generator_7\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_7 (Embedding)      multiple                  3072256   \n",
      "_________________________________________________________________\n",
      "lstm_14 (LSTM)               multiple                  5246976   \n",
      "_________________________________________________________________\n",
      "lstm_15 (LSTM)               multiple                  8392704   \n",
      "_________________________________________________________________\n",
      "dense_7 (Dense)              multiple                  12301025  \n",
      "=================================================================\n",
      "Total params: 29,012,961\n",
      "Trainable params: 29,012,961\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Epoch 1/10\n",
      "549/549 [==============================] - 103s 184ms/step - loss: 3.1015\n",
      "Epoch 2/10\n",
      "549/549 [==============================] - 100s 182ms/step - loss: 2.6607\n",
      "Epoch 3/10\n",
      "549/549 [==============================] - 100s 182ms/step - loss: 2.5035\n",
      "Epoch 4/10\n",
      "549/549 [==============================] - 100s 182ms/step - loss: 2.3795\n",
      "Epoch 5/10\n",
      "549/549 [==============================] - 100s 182ms/step - loss: 2.2706\n",
      "Epoch 6/10\n",
      "549/549 [==============================] - 100s 182ms/step - loss: 2.1708\n",
      "Epoch 7/10\n",
      "549/549 [==============================] - 100s 182ms/step - loss: 2.0784\n",
      "Epoch 8/10\n",
      "549/549 [==============================] - 100s 182ms/step - loss: 1.9918\n",
      "Epoch 9/10\n",
      "549/549 [==============================] - 100s 182ms/step - loss: 1.9097\n",
      "Epoch 10/10\n",
      "549/549 [==============================] - 100s 182ms/step - loss: 1.8302\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7f4a9bc72250>"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 4. 인공지능 만들기\n",
    "\n",
    "  # 모델 생성 (Class TextGenerator(tf.keras.Model)\n",
    "    # 자식클래스 함수 생성(부모 클래스 tf.keras.Model)\n",
    "      # 임베딩 : tf.keras.layers.Embedding(vocab_size, embedding_size)\n",
    "      # rnn_1, 2 : tf.keras.layers.LSTM(hidden_size, return_sequences=True)\n",
    "      # linear : tf.keras.layers.Dense(vocab_size)\n",
    "    # call 함수 생성\n",
    "class TextGenerator(tf.keras.Model):\n",
    "  def __init__(self, vocab_size, embedding_size, hidden_size):\n",
    "    super().__init__()\n",
    "    self.embedding = tf.keras.layers.Embedding(vocab_size, embedding_size)\n",
    "    self.rnn_1 = tf.keras.layers.LSTM(hidden_size, return_sequences = True)\n",
    "    self.rnn_2 = tf.keras.layers.LSTM(hidden_size, return_sequences = True)\n",
    "    self.linear = tf.keras.layers.Dense(vocab_size)\n",
    "\n",
    "  def call(self,x):\n",
    "    out = self.embedding(x)\n",
    "    out = self.rnn_1(out)\n",
    "    out = self.rnn_2(out)\n",
    "    out = self.linear(out)\n",
    "\n",
    "    return out\n",
    "\n",
    "  # embedding_size, hidden_size 값 설정\n",
    "embedding_size = 256\n",
    "hidden_size = 1024\n",
    "\n",
    "\n",
    "\n",
    "  # 클래스 호출 및 모델 정의\n",
    "model = TextGenerator(tokenizer.num_words +1, embedding_size, hidden_size)  \n",
    "\n",
    "\n",
    "\n",
    "  # (테스트) 모델 테스트\n",
    "    # 배치 하나 불러오기 \n",
    "    # 모델에 넣기\n",
    "    # 모델 서머리 확인\n",
    "for scr_sample, tgt_sample in dataset.take(1) : break\n",
    "model(scr_sample)\n",
    "model.summary()\n",
    "\n",
    "\n",
    "\n",
    "  # 모델 학습\n",
    "    # optimizer 생성 : tf.keras.optimizers.Adam()\n",
    "    # loss 생성 : tf.keras.SparseCategoricalCrossentropy(from_logits=True, reduction = 'none')\n",
    "    # 모델 컴파일 : model.compile(loss=, optimizer=)\n",
    "    # 모델 학습 : model.fit(dataset , epochs=)\n",
    "optimizer = tf.keras.optimizers.Adam()\n",
    "loss = tf.keras.losses.SparseCategoricalCrossentropy(\n",
    "    from_logits=True,\n",
    "    reduction='none')\n",
    "model.compile(loss=loss, optimizer=optimizer)\n",
    "model.fit(dataset, epochs=10)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "00721142",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'<start> i like the way how you re kissin me <end> '"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 작문 모델 생성\n",
    "  \n",
    "  # 텍스트 생성 함수 정의\n",
    "    # 함수명 및 변수 지정\n",
    "    # 테스트 문장 텐서로 변경\n",
    "      # 테스트 인풋 정의: tokenizer.texts_to_sequences\n",
    "      # 테스트 텐서 정의 : tf.covert_to_tensor(test_input, dtpye=tf.init64)\n",
    "      # 마지막 토큰 정의 : end_token = tokenizer.word_index[\"<end\"]\n",
    "    # while 함수를 이용하여 문장 생성\n",
    "      # 1. 입력받은 문장의 텐서를 입력\n",
    "      # 2. 예측된 값 중 가장 높은 확률의 word index 뽑기\n",
    "      # 3. 예측한 word index를 문장 뒤에 붙임\n",
    "      # 4. 모델이 <end>를 예측했거나, max_len에 도달하면 문장 생성을 마침\n",
    "    # tokennizer를 이용해 word index를 단어로 하나씩 변환\n",
    "\n",
    "\n",
    "def generate_text(model, tokenizer, init_sentence=\"<start>\", max_len=20):\n",
    "    # 테스트를 위해서 입력받은 init_sentence도 텐서로 변환합니다\n",
    "    test_input = tokenizer.texts_to_sequences([init_sentence])\n",
    "    test_tensor = tf.convert_to_tensor(test_input, dtype=tf.int64)\n",
    "    end_token = tokenizer.word_index[\"<end>\"]\n",
    "\n",
    "    # 단어 하나씩 예측해 문장을 만듭니다\n",
    "    #    1. 입력받은 문장의 텐서를 입력합니다\n",
    "    #    2. 예측된 값 중 가장 높은 확률인 word index를 뽑아냅니다\n",
    "    #    3. 2에서 예측된 word index를 문장 뒤에 붙입니다\n",
    "    #    4. 모델이 <end>를 예측했거나, max_len에 도달했다면 문장 생성을 마칩니다\n",
    "    while True:\n",
    "        # 1\n",
    "        predict = model(test_tensor) \n",
    "        # 2\n",
    "        predict_word = tf.argmax(tf.nn.softmax(predict, axis=-1), axis=-1)[:, -1] \n",
    "        # 3 \n",
    "        test_tensor = tf.concat([test_tensor, tf.expand_dims(predict_word, axis=0)], axis=-1)\n",
    "        # 4\n",
    "        if predict_word.numpy()[0] == end_token: break\n",
    "        if test_tensor.shape[1] >= max_len: break\n",
    "\n",
    "    generated = \"\"\n",
    "    # tokenizer를 이용해 word index를 단어로 하나씩 변환합니다 \n",
    "    for word_index in test_tensor[0].numpy():\n",
    "        generated += tokenizer.index_word[word_index] + \" \"\n",
    "\n",
    "    return generated\n",
    "\n",
    "  # 가사 생성 \n",
    "generate_text(model, tokenizer, init_sentence=\"<start> I like\", max_len=20)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
